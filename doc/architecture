Contents

1. Abstract
2. Overview
3. Application
  3.1. Compilation Unit (Module)
  3.2. Application Entry Point
4. External Dependencies
  4.1. Interface File


1. Abstract

  This document reflects the internal architecture of the nessy framework. It
  is a a technical documentation of all implementations inside the framework.


2. Overview

  +-----------------------+
  | External Dependencies |
  |      (Libraries)      |
  +-----------------------+
            ^
            |
            |
      +-------------+
      | Application |
      |  (Modules)  |
      +-------------+
            ^
            |
            |
  +----------------------+
  |       Runtime        |
  | (Updater, Execution) |
  +----------------------+

  In the center of this framework stands an application. An application
  consists of several compilation units (named modules). It might have or might
  not have dependencies on external libraries. The runtime creates an loads and
  runs the application and its external dependencies.


3. Application

  TODO: what has an application to do with this framework?


  3.1. Compilation Unit (Module)

    A compilation unit is a single file forming a part of a program. A module
    is a compilation unit. A compilation unit has dependencies on other
    compilation units.


  3.2. Application Entry Point

    The applicatin entry point is the function at which the execution of the
    program begins. In this framework it is the function `Main.main`. So there
    must be a module named `Main` which exports a symbol named `main`.

    The main function's signature must match:

        main :: IO ()


4. External Dependencies

  An external dependency (or library) is a collection of modules that cannot be
  executed standalone. They provide functionality for applications and other
  libraries. A library consists of several interface files.

    4.1. Interface Files

    An interface file contains signatures of functions and constants and the defined types.

